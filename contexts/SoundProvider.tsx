import React, { createContext, useState, useCallback, useMemo, useEffect } from 'react';

interface SoundContextType {
  isMuted: boolean;
  toggleMute: () => void;
  playSound: (soundName: SoundName) => void;
}

// Sound files are now valid Base64 encoded audio to be self-contained and avoid 404 errors.
const soundFiles = {
  'book-open': 'data:audio/mpeg;base64,SUQzBAAAAAAAIBAFVAAAAEgAAABUAAAATESAAAP//tAwxAAAAAAAAAAAA/8A/8BAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wXAIQAAAAAAABBTEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE//uGAAAAgABsADAAAAP//uQwRAgAAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE',
  'book-close': 'data:audio/mpeg;base64,SUQzBAAAAAAAIBAFVAAAAEgAAABUAAAATESAAAP//tAwxAAAAAAAAAAAA/8A/8BAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wXAIQAAAAAAABBTEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE//uGAAAAgABsADAAAAP//uQwRAgAAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE',
  'click': 'data:audio/mpeg;base64,SUQzBAAAAAAAIBAFVAAAAEgAAABUAAAATESAAAP//tAwRAAAAAAAAAMlJAAD/8A/8BAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE//uGQRAgAAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE',
  'start': 'data:audio/mpeg;base64,SUQzBAAAAAAAIBAFVAAAAEgAAABUAAAATESAAAP//tAwRAAAAAAAAAMlJAAD/8A/8BAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE//uGQRAgAAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/9.8wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE',
  'success': 'data:audio/mpeg;base64,SUQzBAAAAAAAIBAFVAAAAEgAAABUAAAATESAAAP//tAwRAAAAAAAAAMlJAAD/8A/8BAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE//uGQRAgAAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE',
  'error': 'data:audio/mpeg;base64,SUQzBAAAAAAAIBAFVAAAAEgAAABUAAAATESAAAP//tAwRAAAAAAAAAMlJAAD/8A/8BAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE//uGQRAgAAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE',
  'delete': 'data:audio/mpeg;base64,SUQzBAAAAAAAIBAFVAAAAEgAAABUAAAATESAAAP//tAwRAAAAAAAAAMlJAAD/8A/8BAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE//uGQRAgAAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE',
  'drop': 'data:audio/mpeg;base64,SUQzBAAAAAAAIBAFVAAAAEgAAABUAAAATESAAAP//tAwRAAAAAAAAAMlJAAD/8A/8BAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE//uGQRAgAAAAAQBMAEBAQAATEAAAAsAAAP8AAAAAAAAD/98wbAIgAAAAAAABDEAAAAP8AABAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIE',
};

export type SoundName = keyof typeof soundFiles;

export const SoundContext = createContext<SoundContextType | undefined>(undefined);

export const SoundProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isMuted, setIsMuted] = useState(true); // Muted by default

  const audioCache = useMemo(() => {
    const cache = new Map<SoundName, HTMLAudioElement>();
    (Object.keys(soundFiles) as SoundName[]).forEach(name => {
      const audio = new Audio(soundFiles[name]);
      audio.preload = 'auto';
      cache.set(name, audio);
    });
    return cache;
  }, []);
  
  // Set volumes after creation using the correct .volume property
  useEffect(() => {
      const setVolume = (name: SoundName, vol: number) => {
          const audio = audioCache.get(name);
          if (audio) audio.volume = vol;
      };
      setVolume('book-open', 0.5);
      setVolume('book-close', 0.5);
      setVolume('click', 0.7);
      setVolume('delete', 0.6);
      setVolume('drop', 0.6);
      setVolume('start', 0.4);
      setVolume('success', 0.5);
      setVolume('error', 0.5);
  }, [audioCache]);

  const toggleMute = useCallback(() => {
    setIsMuted(prev => !prev);
  }, []);

  const playSound = useCallback((soundName: SoundName) => {
    if (isMuted) return;
    const audio = audioCache.get(soundName);
    if (audio) {
      audio.currentTime = 0;
      audio.play().catch(error => console.error(`Error playing sound ${soundName}:`, error));
    }
  }, [isMuted, audioCache]);

  const value = useMemo(() => ({ isMuted, toggleMute, playSound }), [isMuted, toggleMute, playSound]);

  return (
    <SoundContext.Provider value={value}>
      {children}
    </SoundContext.Provider>
  );
};
